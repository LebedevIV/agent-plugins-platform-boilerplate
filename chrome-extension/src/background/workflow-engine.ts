/**
 * Workflow Engine for Agent-Plugins-Platform
 * Executes declarative workflows
 */

import { runPythonTool } from './mcp-bridge';
import { hostApi } from './host-api';

export interface WorkflowStep {
  id: string;
  tool: string;
  input?: Record<string, any>;
}

export interface Workflow {
  steps: WorkflowStep[];
}

export interface WorkflowContext {
  steps: Record<string, any>;
  logger: any;
  page_html?: string;
}

export async function runWorkflow(pluginId: string) {
  const runId = `workflow-${pluginId}-${Date.now()}`;
  const title = `–í–æ—Ä–∫—Ñ–ª–æ—É –ø–ª–∞–≥–∏–Ω–∞: ${pluginId}`;
  
  // Create logger if available
  const logger = (window as any).activeWorkflowLogger || {
    addMessage: (type: string, message: string, status?: string) => {
      console.log(`[${type}] ${message}`);
    },
    renderResult: (stepId: string, result: any) => {
      console.log(`Result for ${stepId}:`, result);
    }
  };

  logger.addMessage('ENGINE', `‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫—Ñ–ª–æ—É...`);
  
  // Switch to logs tab if available
  document.querySelector('.tab-button[data-tab="logs"]')?.click();

  const workflow = await loadWorkflowDefinition(pluginId, logger);
  if (!workflow) return;

  // Get page HTML for plugins
  let pageHtml = '';
  try {
    if (hostApi && typeof hostApi.getActivePageContent === 'function') {
      const pageContent = await hostApi.getActivePageContent();
      pageHtml = pageContent.html || '';
      logger.addMessage('ENGINE', `üìÑ –ü–æ–ª—É—á–µ–Ω HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (${pageHtml.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    }
  } catch (error) {
    logger.addMessage('WARNING', `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${(error as Error).message}`);
  }

  const context: WorkflowContext = { 
    steps: {}, 
    logger: logger,
    page_html: pageHtml
  };

  for (const step of workflow.steps) {
    logger.addMessage('ENGINE', `‚û°Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: ${step.id} (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${step.tool})`);
    try {
      const toolInput = resolveInputs(step.input, context);
      let output;
      const [toolType, toolName] = step.tool.split('.');

      if (toolType === 'host') {
        if (hostApi && typeof (hostApi as any)[toolName] === 'function') {
          output = await (hostApi as any)[toolName](toolInput, context);
        } else {
          throw new Error(`Host tool "${toolName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
      } else if (toolType === 'python') {
        output = await runPythonTool(pluginId, toolName, toolInput);
      } else {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${step.tool}`);
      }
      context.steps[step.id] = { output };
      logger.addMessage('ENGINE', `‚úÖ –®–∞–≥ ${step.id} –≤—ã–ø–æ–ª–Ω–µ–Ω.`);
    } catch (error) {
      logger.addMessage('ERROR', `‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${step.id}: ${(error as Error).message}`);
      console.error(`[WorkflowEngine] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, error);
      return;
    }
  }

  // Display final result
  try {
    const lastStep = workflow.steps[workflow.steps.length - 1];
    if (lastStep && context.steps[lastStep.id]) {
      const finalResult = context.steps[lastStep.id].output;
      logger.renderResult(lastStep.id, finalResult);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
    const lastStep = workflow.steps[workflow.steps.length - 1];
    const rawResult = context.steps[lastStep.id]?.output;
    logger.addMessage('ENGINE', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(rawResult)}`, 'error');
  }

  logger.addMessage('ENGINE', `üèÅ –í–æ—Ä–∫—Ñ–ª–æ—É —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.`);
}

async function loadWorkflowDefinition(pluginId: string, logger: any): Promise<Workflow | null> {
  try {
    const response = await fetch(chrome.runtime.getURL(`plugins/${pluginId}/workflow.json`));
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    return await response.json();
  } catch (error) {
    logger.addMessage('ERROR', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å workflow.json: ${(error as Error).message}`);
    return null;
  }
}

function resolveInputs(input: Record<string, any> | undefined, context: WorkflowContext): Record<string, any> {
  if (!input) return {};
  const resolvedInput: Record<string, any> = {};
  for (const key in input) {
    const value = input[key];
    if (typeof value === 'string' && value.startsWith('{{') && value.endsWith('}}')) {
      const path = value.substring(2, value.length - 2).trim();
      resolvedInput[key] = getContextValue(path, context);
    } else {
      resolvedInput[key] = value;
    }
  }
  return resolvedInput;
}

function getContextValue(path: string, context: WorkflowContext): any {
  return path.split('.').reduce((acc, part) => {
    return acc && acc[part] !== undefined ? acc[part] : null;
  }, context);
} 
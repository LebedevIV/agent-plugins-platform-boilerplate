# Agent-Plugins-Platform Development Rules

## Project Overview
Agent-Plugins-Platform (APP) is a browser extension that enables Python plugin execution in browsers using Pyodide and MCP protocol. The project focuses on security, performance, and developer experience.

## Architecture Patterns

### Core Components
- **Plugin Manager** (`core/plugin-manager.js`): Handles plugin lifecycle and coordination
- **Host API** (`core/host-api.js`): Provides browser API access to Python
- **Workflow Engine** (`core/workflow-engine.js`): Executes plugin workflows
- **MCP Bridge** (`bridge/mcp-bridge.js`): JavaScript-Python communication
- **Pyodide Worker** (`bridge/pyodide-worker.js`): Isolated Python execution

### Plugin Structure
```
public/plugins/plugin-name/
├── manifest.json      # Plugin metadata and permissions
├── mcp_server.py      # Python MCP protocol implementation
├── workflow.json      # Plugin workflow definition
└── icon.svg          # Plugin icon
```

### Communication Flow
1. UI → Plugin Manager → MCP Bridge → Pyodide Worker → Python Plugin
2. Python Plugin → Host API → Browser APIs
3. Results flow back through the same path

## Development Guidelines

### JavaScript/TypeScript
- Use ES6+ features and modern async/await patterns
- Follow modular architecture with clear separation of concerns
- Implement proper error handling and logging
- Use TypeScript for type safety where possible
- Prefer functional programming patterns

### Python (Plugins)
- Follow MCP protocol standards for communication
- Use async/await for all I/O operations
- Implement proper error handling and validation
- Keep plugins focused and single-purpose
- Document plugin APIs and usage

### Security First
- Always validate plugin manifests and permissions
- Sanitize all data passed between JS and Python
- Implement proper sandboxing for plugin execution
- Use principle of least privilege for API access
- Audit plugin code for security issues

### Performance Considerations
- Lazy load plugins and Pyodide runtime
- Implement caching for repeated operations
- Monitor memory usage and cleanup resources
- Optimize bundle size and loading times
- Use WebWorkers for non-blocking operations

## File Organization

### Core Files
- `manifest.json`: Extension configuration (Manifest V3)
- `package.json`: Node.js dependencies and scripts
- `vite.config.js`: Build configuration
- `index.html`: Main application entry point
- `test-harness.js`: Development testing interface

### Plugin Development
- Create plugins in `public/plugins/`
- Follow naming convention: `plugin-name/`
- Include complete plugin metadata in manifest.json
- Implement MCP protocol in mcp_server.py
- Define workflows in workflow.json

### Build and Deploy
- Use `npm run dev` for development
- Use `npm run build` for production
- Test extension in browser developer mode
- Validate plugin security before distribution

## Common Patterns

### Plugin Manifest Structure
```json
{
  "name": "Plugin Name",
  "version": "1.0.0",
  "description": "Plugin description",
  "main_server": "mcp_server.py",
  "host_permissions": ["*://*.example.com/*"],
  "permissions": ["activeTab", "scripting"]
}
```

### MCP Message Format
```javascript
{
  "type": "request|response|notification",
  "id": "unique-message-id",
  "method": "function-name",
  "params": { /* parameters */ },
  "result": { /* result */ }
}
```

### Python Plugin Template
```python
import sys
import json
from typing import Any, Dict

async def main():
    line = sys.stdin.readline()
    request = json.loads(line)
    
    # Handle request
    result = await process_request(request)
    
    # Send response
    response = {"result": result}
    sys.stdout.write(json.dumps(response) + '\n')

async def process_request(request: Dict[str, Any]) -> Dict[str, Any]:
    # Plugin logic here
    return {"status": "success"}
```

## Testing Strategy

### Unit Testing
- Test individual components in isolation
- Mock external dependencies
- Validate error handling paths
- Test security boundaries

### Integration Testing
- Test plugin loading and execution
- Validate JS-Python communication
- Test browser API integration
- Verify permission enforcement

### End-to-End Testing
- Test complete plugin workflows
- Validate user interactions
- Test extension installation and updates
- Verify cross-browser compatibility

## Debugging Guidelines

### JavaScript Debugging
- Use browser DevTools for extension debugging
- Add console.log for message flow tracking
- Use breakpoints for complex logic
- Monitor WebWorker communication

### Python Debugging
- Use print statements for basic debugging
- Implement structured logging
- Test plugins in isolation first
- Use Pyodide console for runtime debugging

### Common Issues
- Pyodide startup time: Implement loading indicators
- Memory leaks: Monitor worker lifecycle
- Permission errors: Validate manifest permissions
- Communication failures: Check MCP message format

## Performance Optimization

### Startup Optimization
- Lazy load Pyodide runtime
- Cache plugin manifests
- Optimize bundle size
- Use service worker caching

### Runtime Optimization
- Implement plugin result caching
- Optimize memory usage
- Use efficient data structures
- Minimize cross-worker communication

### Memory Management
- Clean up WebWorker resources
- Monitor memory usage
- Implement garbage collection hints
- Limit concurrent plugin execution

## Security Best Practices

### Plugin Validation
- Validate plugin manifests
- Check permission requirements
- Scan for malicious code
- Verify plugin signatures

### Runtime Security
- Enforce sandbox boundaries
- Validate all inputs
- Monitor plugin behavior
- Implement rate limiting

### Data Protection
- Sanitize all user data
- Encrypt sensitive information
- Implement secure communication
- Audit data access patterns

## Documentation Standards

### Code Documentation
- Document all public APIs
- Include usage examples
- Explain security considerations
- Provide troubleshooting guides

### User Documentation
- Create plugin development guide
- Document installation process
- Provide troubleshooting FAQ
- Include security best practices

### API Documentation
- Document MCP protocol usage
- Explain Host API capabilities
- Provide plugin templates
- Include performance guidelines

## Deployment Considerations

### Extension Distribution
- Follow Chrome Web Store guidelines
- Implement secure update mechanism
- Provide clear privacy policy
- Include user support channels

### Plugin Distribution
- Create plugin marketplace
- Implement plugin validation
- Provide version management
- Include security scanning

### Monitoring and Analytics
- Track plugin usage patterns
- Monitor performance metrics
- Collect error reports
- Analyze user feedback

## Future Considerations

### Scalability
- Plan for plugin ecosystem growth
- Design for concurrent execution
- Consider distributed architecture
- Plan for internationalization

### Feature Roadmap
- Enhanced plugin management
- Advanced security features
- Performance optimizations
- Developer tooling improvements

### Community Building
- Foster plugin developer community
- Create plugin templates
- Provide developer support
- Establish contribution guidelines 
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

class MemoryBankOrganizer {
  constructor() {
    this.memoryBankDir = path.join(process.cwd(), 'memory-bank');
    this.structurePath = path.join(this.memoryBankDir, 'MEMORY_BANK_STRUCTURE.md');
  }

  async reorganize() {
    console.log('üß† Reorganizing Memory Bank...\n');
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    await this.createDirectoryStructure();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    const fileAnalysis = await this.analyzeFiles();
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    await this.moveFiles(fileAnalysis);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await this.createIndexes();
    
    console.log('‚úÖ Memory Bank reorganization completed!');
  }

  async createDirectoryStructure() {
    const directories = [
      'core',
      'errors',
      'architecture',
      'development',
      'ui',
      'planning',
      'context',
      'deprecated'
    ];

    for (const dir of directories) {
      const dirPath = path.join(this.memoryBankDir, dir);
      if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        console.log(`üìÅ Created directory: ${dir}`);
      }
    }
  }

  async analyzeFiles() {
    const files = fs.readdirSync(this.memoryBankDir)
      .filter(file => file.endsWith('.md') && file !== 'MEMORY_BANK_STRUCTURE.md')
      .map(file => ({
        name: file,
        path: path.join(this.memoryBankDir, file),
        category: this.categorizeFile(file)
      }));

    return files;
  }

  categorizeFile(filename) {
    const name = filename.toLowerCase();
    
    // Core —Ñ–∞–π–ª—ã
    if (name.includes('activecontext') || name.includes('progress') || 
        name.includes('projectbrief') || name.includes('session-log')) {
      return 'core';
    }
    
    // Errors
    if (name.includes('error') || name.includes('graveyard') || 
        name.includes('vite-react') || name.includes('typescript-build')) {
      return 'errors';
    }
    
    // Architecture
    if (name.includes('architecture') || name.includes('systempattern') || 
        name.includes('security-architecture') || name.includes('comprehensive-architecture')) {
      return 'architecture';
    }
    
    // Development
    if (name.includes('testing') || name.includes('debug') || 
        name.includes('devtools') || name.includes('version-management')) {
      return 'development';
    }
    
    // UI
    if (name.includes('side-panel') || name.includes('chat-context') || 
        name.includes('lazy-sync') || name.includes('ui')) {
      return 'ui';
    }
    
    // Planning
    if (name.includes('future') || name.includes('plan') || 
        name.includes('optimization') || name.includes('roadmap')) {
      return 'planning';
    }
    
    // Context
    if (name.includes('tech-context') || name.includes('product-context') || 
        name.includes('environment') || name.includes('context')) {
      return 'context';
    }
    
    // Deprecated (–¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ)
    if (name.includes('cursor-') || name.includes('ai-') || 
        name.includes('mdc-file-standards') || name.includes('user-commands')) {
      return 'deprecated';
    }
    
    return 'core'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ core
  }

  async moveFiles(fileAnalysis) {
    for (const file of fileAnalysis) {
      const targetDir = path.join(this.memoryBankDir, file.category);
      const targetPath = path.join(targetDir, file.name);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
      if (fs.existsSync(targetPath)) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        const newName = `migrated-${file.name}`;
        const newTargetPath = path.join(targetDir, newName);
        fs.renameSync(file.path, newTargetPath);
        console.log(`üìÑ Moved: ${file.name} ‚Üí ${file.category}/${newName}`);
      } else {
        fs.renameSync(file.path, targetPath);
        console.log(`üìÑ Moved: ${file.name} ‚Üí ${file.category}/`);
      }
    }
  }

  async createIndexes() {
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = ['core', 'errors', 'architecture', 'development', 'ui', 'planning', 'context'];
    
    for (const category of categories) {
      await this.createCategoryIndex(category);
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å
    await this.createMainIndex();
  }

  async createCategoryIndex(category) {
    const categoryDir = path.join(this.memoryBankDir, category);
    const indexPath = path.join(categoryDir, 'README.md');
    
    if (!fs.existsSync(categoryDir)) return;
    
    const files = fs.readdirSync(categoryDir)
      .filter(file => file.endsWith('.md') && file !== 'README.md')
      .sort();
    
    const indexContent = `# ${this.getCategoryTitle(category)} - Index

## Files in this category:

${files.map(file => `- [${file.replace('.md', '')}](./${file})`).join('\n')}

## Description:

${this.getCategoryDescription(category)}

## Last updated: ${new Date().toISOString().split('T')[0]}
`;

    fs.writeFileSync(indexPath, indexContent);
    console.log(`üìã Created index: ${category}/README.md`);
  }

  async createMainIndex() {
    const indexPath = path.join(this.memoryBankDir, 'INDEX.md');
    
    const indexContent = `# Memory Bank - Main Index

## Categories:

### üìã [Core](./core/) - –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- activeContext.md - –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
- progress.md - –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- projectbrief.md - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
- session-log.md - –õ–æ–≥ —Å–µ—Å—Å–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### ‚ùå [Errors](./errors/) - –û—à–∏–±–∫–∏ –∏ —Ä–µ—à–µ–Ω–∏—è
- errors.md - –ö–ª–∞–¥–±–∏—â–µ –æ—à–∏–±–æ–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª)
- build-errors.md - –û—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏
- runtime-errors.md - Runtime –æ—à–∏–±–∫–∏
- ui-errors.md - UI/UX –æ—à–∏–±–∫–∏

### üèóÔ∏è [Architecture](./architecture/) - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- decisions.md - –ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è
- patterns.md - –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
- security.md - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- comprehensive.md - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### üîß [Development](./development/) - –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- testing-results.md - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- debugging-guide.md - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –æ—Ç–ª–∞–¥–∫–µ
- devtools-guide.md - –†–∞–±–æ—Ç–∞ —Å DevTools
- version-management.md - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏

### üé® [UI](./ui/) - UI/UX –∫–æ–Ω—Ç–µ–∫—Å—Ç
- side-panel.md - –£–ª—É—á—à–µ–Ω–∏—è side-panel
- chat-context.md - –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
- lazy-sync.md - –õ–µ–Ω–∏–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

### üìÖ [Planning](./planning/) - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- future-plans.md - –ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è
- optimization-plans.md - –ü–ª–∞–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- roadmap.md - Roadmap –ø—Ä–æ–µ–∫—Ç–∞

### üåç [Context](./context/) - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- tech-context.md - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
- product-context.md - –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
- environment.md - –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### üóëÔ∏è [Deprecated](./deprecated/) - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã
- –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –¥—É–±–ª–∏–∫–∞—Ç—ã, –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏

## Quick Navigation:

- **Current Status**: [activeContext.md](./core/activeContext.md)
- **Progress**: [progress.md](./core/progress.md)
- **Errors**: [errors.md](./errors/errors.md)
- **Architecture**: [decisions.md](./architecture/decisions.md)
- **Testing**: [testing-results.md](./development/testing-results.md)

## Structure Rules:

See [MEMORY_BANK_STRUCTURE.md](./MEMORY_BANK_STRUCTURE.md) for detailed organization rules.

Last updated: ${new Date().toISOString().split('T')[0]}
`;

    fs.writeFileSync(indexPath, indexContent);
    console.log(`üìã Created main index: INDEX.md`);
  }

  getCategoryTitle(category) {
    const titles = {
      'core': 'Core Files',
      'errors': 'Errors & Solutions',
      'architecture': 'Architecture Decisions',
      'development': 'Development Process',
      'ui': 'UI/UX Context',
      'planning': 'Planning & Roadmap',
      'context': 'Context Information',
      'deprecated': 'Deprecated Files'
    };
    
    return titles[category] || category;
  }

  getCategoryDescription(category) {
    const descriptions = {
      'core': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ.',
      'errors': '–ü—Ä–æ–µ–∫—Ç–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è. –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–±–ª–µ–º –∏ workarounds.',
      'architecture': '–ü—Ä–∏–Ω—è—Ç—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º. –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç.',
      'development': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –æ—Ç–ª–∞–¥–∫–µ, –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.',
      'ui': 'UI/UX —Ä–µ—à–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.',
      'planning': '–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞, roadmap, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è.',
      'context': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.',
      'deprecated': '–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã, –¥—É–±–ª–∏–∫–∞—Ç—ã, –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏.'
    };
    
    return descriptions[category] || 'Category description';
  }

  async cleanup() {
    console.log('\nüßπ Cleaning up deprecated files...');
    
    const deprecatedDir = path.join(this.memoryBankDir, 'deprecated');
    if (fs.existsSync(deprecatedDir)) {
      const files = fs.readdirSync(deprecatedDir);
      
      for (const file of files) {
        if (file.endsWith('.md')) {
          const filePath = path.join(deprecatedDir, file);
          const content = fs.readFileSync(filePath, 'utf8');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          if (content.length < 1000) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è Removed small file: ${file}`);
          }
        }
      }
    }
  }
}

// CLI –æ–±—Ä–∞–±–æ—Ç–∫–∞
async function main() {
  const args = process.argv.slice(2);
  
  const organizer = new MemoryBankOrganizer();
  
  if (args.includes('--cleanup')) {
    await organizer.cleanup();
  } else {
    await organizer.reorganize();
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = MemoryBankOrganizer; 
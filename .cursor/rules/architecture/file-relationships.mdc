---
description: File organization patterns and relationships - universal project structure guIDElines
globs: ["**/*"]
alwaysApply: true
aiPriority: high
aiCategory: system-design
---

# Карта взаимосвязей файлов

## File Structure и их Purpose

### 1. Background Layer (Слой фоновых сервисов)

#### `chrome-extension/src/background/plugin-chat-cache.ts`
**Purpose:** Центральный сервис управления чатами
**Dependencies:**
- `plugin-chat-API.ts` - для работы с IndexedDB
- Chrome Extensions API (chrome.runtime, chrome.tabs)

**Экспортирует:**
- `PluginChatcache` class
- `Chatdata`, `ChatMessage` interfaces

**Используется:**
- `background/index.ts` - создание экземпляра и регистрация обработчиков

**Ключевые Methodы:**
```TypeScript
class PluginChatcache {
  getChat(pluginId: string, pageKey: string): Promise<Chatdata | null>
  saveMessage(pluginId: string, pageKey: string, message: ChatMessage): Promise<void>
  deleteChat(pluginId: string, pageKey: string): Promise<void>
  getAllCh.ts(): Promise<Chatdata[]>
  cleanupOldCh.ts(): Promise<void>
}
```

#### `chrome-extension/src/background/plugin-chat-API.ts`
**Purpose:** Abstraction над IndexedDB
**Dependencies:**
- IndexedDB API
- Chrome Extensions API

**Экспортирует:**
- `Ch.tstorageAPI` class
- database utility functions

**Используется:**
- `plugin-chat-cache.ts` - для всех операций с Storageм

**Ключевые Methodы:**
```TypeScript
class Ch.tstorageAPI {
  async getChat(pluginId: string, pageKey: string): Promise<Chatdata | null>
  async saveChat(chatdata: Chatdata): Promise<void>
  async deleteChat(pluginId: string, pageKey: string): Promise<void>
  async getAllCh.ts(): Promise<Chatdata[]>
  async cleanupOldCh.ts(): Promise<void>
}
```

#### `chrome-extension/src/background/index.ts`
**Purpose:** Точка входа background script
**Dependencies:**
- `plugin-chat-cache.ts` - создание экземпляра cacheа
- Chrome Extensions API

**Используется:**
- Chrome Extensions runtime (автоматически)

**Основные функции:**
- Инициализация `PluginChatcache`
- Регистрация обработчиков сообщений
- Управление жизненным циклом

**Обработчики сообщений:**
```TypeScript
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  switch (request.type) {
    case 'GET_PLUGIN_CHAT':
    case 'SAVE_PLUGIN_CHAT_MESSAGE':
    case 'DELETE_PLUGIN_CHAT':
    case 'GET_ALL_PLUGIN_CH.ts':
  }
});
```

### 2. UI Layer (Слой пользовательского Interfaceа)

#### `pages/sIDE-panel/src/compone.ts/PluginControlPanel.tsx`
**Purpose:** Основной компонент управления плагином
**Dependencies:**
- React hooks (useState, useEffect, useRef)
- Chrome Extensions API (chrome.runtime)
- `PluginDetails.tsx` - для отображения деталей плагина

**Используется:**
- `pages/sIDE-panel/src/compone.ts/SIDEPanel.tsx` - основной контейнер

**Ключевые состояния:**
```TypeScript
const [messages, setMessages] = useState<ChatMessage[]>([]);
const [loading, setLoading] = useState(false);
const [syncStatus, s.tsyncStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');
```

**Основные функции:**
- Загрузка чата при монтировании
- Сохранение сообщений
- Synchronization с другими вкладками
- Экспорт и очистка чатов

#### `pages/sIDE-panel/src/compone.ts/PluginDetails.tsx`
**Purpose:** Отображение деталей плагина
**Dependencies:**
- React
- Plugin interface

**Используется:**
- `PluginControlPanel.tsx` - как дочерний компонент

#### `pages/sIDE-panel/src/compone.ts/SIDEPanel.tsx`
**Purpose:** Основной контейнер sIDE panel
**Dependencies:**
- `PluginControlPanel.tsx`
- `PluginCard.tsx`
- React

**Используется:**
- Chrome Extensions sIDE panel API

### 3. DevTools Layer (Слой инструментов разработчика)

#### `pages/devtools-panel/src/compone.ts/PluginCh.tsTab.tsx`
**Purpose:** Административный Interface для управления чатами
**Dependencies:**
- React hooks
- Chrome Extensions API
- `file-saver` library

**Используется:**
- `pages/devtools-panel/src/index.tsx` - как вкладка в DevTools

**Основные функции:**
- Отображение всех чатов
- Удаление чатов
- Экспорт в.json
- Фильтрация и поиск

#### `pages/devtools-panel/src/index.tsx`
**Purpose:** Точка входа DevTools panel
**Dependencies:**
- `PluginCh.tsTab.tsx`
- React

**Используется:**
- Chrome DevTools API

### 4. Shared Layer (Общий слой)

#### `chrome-extension/src/background/types.ts` (предлагаемый)
**Purpose:** Общие Typeы для всей системы
**Dependencies:**
- TypeScript

**Экспортирует:**
```TypeScript
export interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: number;
}

export interface Chatdata {
  pluginId: string;
  pageKey: string;
  messages: ChatMessage[];
  lastUpdated: number;
  createdAt: number;
}

export type ChatRequest = 
  | { type: 'GET_PLUGIN_CHAT'; pluginId: string; pageKey: string }
  | { type: 'SAVE_PLUGIN_CHAT_MESSAGE'; pluginId: string; pageKey: string; message: ChatMessage }
  | { type: 'DELETE_PLUGIN_CHAT'; pluginId: string; pageKey: string }
  | { type: 'GET_ALL_PLUGIN_CH.ts' };

export type ChatEvent = 
  | { type: 'PLUGIN_CHAT_UPDATED'; pluginId: string; pageKey: string; messages?: ChatMessage[] };
```

**Используется:**
- Все компоненты системы чатов

## Threads данных между файлами

### 1. Загрузка чата
```
PluginControlPanel.tsx
    ↓ (chrome.runtime.sendMessage)
background/index.ts
    ↓ (chatcache.getChat)
plugin-chat-cache.ts
    ↓ (storageAPI.getChat)
plugin-chat-API.ts
    ↓ (IndexedDB)
Browser Storage
```

### 2. Сохранение сообщения
```
PluginControlPanel.tsx
    ↓ (chrome.runtime.sendMessage)
background/index.ts
    ↓ (chatcache.saveMessage)
plugin-chat-cache.ts
    ↓ (storageAPI.saveChat + event broadcast)
plugin-chat-API.ts + chrome.tabs.query
    ↓ (IndexedDB + other tabs)
Browser Storage + Other UI Compone.ts
```

### 3. Административные операции
```
PluginCh.tsTab.tsx
    ↓ (chrome.runtime.sendMessage)
background/index.ts
    ↓ (chatcache.getAllCh.ts/deleteChat)
plugin-chat-cache.ts
    ↓ (storageAPI)
plugin-chat-API.ts
    ↓ (IndexedDB)
Browser Storage
```

## Dependencies и импорты

### Background Layer
```TypeScript
// background/index.ts
import { PluginChatcache } from './plugin-chat-cache';
import type { ChatRequest, ChatEvent } from './types';

// plugin-chat-cache.ts
import { Ch.tstorageAPI } from './plugin-chat-API';
import type { Chatdata, ChatMessage } from './types';

// plugin-chat-API.ts
// Нет внешних зависимостей, только IndexedDB API
```

### UI Layer
```TypeScript
// PluginControlPanel.tsx
import { PluginDetails } from './PluginDetails';
import type { ChatMessage } from '../../../background/types';

// PluginDetails.tsx
import type { Plugin } from './PluginCard';

// SIDEPanel.tsx
import { PluginControlPanel } from './PluginControlPanel';
import { PluginCard } from './PluginCard';
```

### DevTools Layer
```TypeScript
// PluginCh.tsTab.tsx
import { saveAs } from 'file-saver';
import type { Chatdata } from '../../../background/types';

// devtools-panel/index.tsx
import { PluginCh.tsTab } from './compone.ts/PluginCh.tsTab';
```

## configuration Files

### `chrome-extension/manifest.json`
**Purpose:** configuration Extensions
**Содержит:**
- Background script registration
- SIDE panel configuration
- DevTools panel configuration
- Permissions

### `package.json` (в каждой папке pages)
**Purpose:** Dependencies и скрипты сборки
**Содержит:**
- React dependencies
- build tools
- TypeScript configuration

## Стили и ресурсы

###.css файлы
- `PluginControlPanel.css` - стили для основного компонента
- `SIDEPanel.css` - стили для sIDE panel
- `PluginCard.css` - стили для карточек плагинов

### Иконки и изображения
- .icon.svg` - иконки плагинов
- ЛогоTypeы и брендинг

## Тестовые файлы

### Unit Te.ts
- `__te.ts__/plugin-chat-cache.test.ts`
- `__te.ts__/plugin-chat-API.test.ts`
- `__te.ts__/PluginControlPanel.test.tsx`

### Integration Te.ts
- `__te.ts__/chat-system.integration.test.ts`

### E2E Te.ts
- `te.ts/e2e/chat-functionality.test.ts`

## Documentation

### Техническая Documentation
- `README.md` - общее Description
- `API.md` - Documentation API
- `ARCHITECTURE.md` - архитектурное Description

### Пользовательская Documentation
- `USER_GUIDE.md` - руководство пользователя
- `DEVELOPER_GUIDE.md` - руководство разработчика

## Заключение

Система чатов плагинов имеет четкую модульную архитектуру с разделением ответственности:

1. **Background Layer** - управление данными и бизнес-логика
2. **UI Layer** - пользовательский Interface
3. **DevTools Layer** - административные функции
4. **Shared Layer** - общие Typeы и утилиты

Все компоненты связаны через messaging API, что обеспечивает loose coupling и легкую тестируемость. Каждый файл имеет четко определенную ответственность и минимальные Dependencies. 
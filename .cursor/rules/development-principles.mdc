# üõ°Ô∏è 10 Core Development Principles

## 1. Do No Harm (–ù–µ –Ω–∞–≤—Ä–µ–¥–∏)
- **Security first**: Any changes must improve system security, not weaken it
- **Backward compatibility**: Changes must not break existing functionality
- **Gradual implementation**: Implement changes step by step with rollback capability
- **Testing**: All changes must pass thorough testing before deployment
- **Monitoring**: Track impact of changes on performance and stability

## 2. AI-First Documentation (–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ò–ò)
- **Analytical comments**: Add comments explaining logic and architectural decisions for AI understanding
- **Context explanations**: Explain "why", not just "what" the code does
- **Architectural comments**: Document component relationships and data flows
- **Business logic**: Explain complex business logic and decisions made
- **TODO comments**: Leave TODO with explanation of planned improvements

## 3. Best Practices First (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫)
- **Architectural patterns**: Use proven architectural patterns and principles
- **Coding standards**: Follow accepted standards and conventions
- **Security**: Apply security principles (Zero Trust, Defense in Depth, Least Privilege)
- **Performance**: Optimize critical paths and avoid anti-patterns
- **Scalability**: Design considering future growth and changes
- **Testability**: Write code that is easy to test and maintain

## 4. Fail Fast, Fail Safe (–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–∫–∞–∑)
- **Early error detection**: Validate at input, not during execution
- **Graceful degradation**: System continues working even with partial failures
- **Circuit breaker**: Automatic shutdown of problematic components
- **Rollback capability**: Quick rollback to working state
- **Error boundaries**: Isolate errors at component level

## 5. Observability First (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç–∏)
- **Structured logging**: Structured logging for analysis
- **Metrics everywhere**: Performance and state metrics
- **Distributed tracing**: Track requests through all components
- **Health checks**: Monitor state of all services
- **Debug information**: Sufficient information for problem diagnosis

## 6. Configuration as Code (–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–∫ –∫–æ–¥)
- **Version-controlled configs**: All configurations in version control
- **Environment-specific**: Different configurations for different environments
- **Validation**: Automatic configuration validation
- **Documentation**: Document all configuration parameters
- **Default safety**: Safe default values

## 7. Progressive Enhancement (–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ)
- **Core functionality**: Basic functionality always works
- **Feature detection**: Detect browser capabilities
- **Graceful degradation**: Degrade functionality, not complete failure
- **Performance budget**: Performance budget for new features
- **Accessibility baseline**: Minimum accessibility level for all

## 8. Data Integrity & Privacy (–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö)
- **Data validation**: Validate all input data
- **Encryption at rest**: Encrypt data at rest
- **Encryption in transit**: Encrypt data in transit
- **Data minimization**: Collect only necessary data
- **User consent**: Explicit user consent for data processing
- **Right to be forgotten**: Ability to delete user data

## 9. Continuous Learning (–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)
- **Performance monitoring**: Continuous performance monitoring
- **User feedback loops**: User feedback
- **A/B testing**: Test hypotheses on real users
- **Analytics insights**: Usage analysis for improvements
- **Knowledge sharing**: Document lessons and insights

## 10. Ecosystem Thinking (–≠–∫–æ—Å–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ)
- **Plugin compatibility**: Ensure plugin compatibility
- **API stability**: Stable public APIs
- **Backward compatibility**: Backward version compatibility
- **Community building**: Support developer community
- **Documentation quality**: Quality documentation for ecosystem
description:
globs:
alwaysApply: false
---

# ðŸ”Œ Plugin Development Standards

## Plugin Structure
```
public/plugins/plugin-name/
â”œâ”€â”€ manifest.json      # Plugin metadata and permissions
â”œâ”€â”€ mcp_server.py      # Python MCP protocol implementation
â”œâ”€â”€ workflow.json      # Plugin workflow definition (optional)
â””â”€â”€ icon.svg          # Plugin icon
```

## Manifest.json Requirements
```json
{
  "name": "Plugin Name",
  "version": "1.0.0",
  "description": "Plugin description",
  "main_server": "mcp_server.py",
  "required_secrets": ["openai_api_key", "weather_api_key"],
  "api_permissions": {
    "openai": {
      "domains": ["api.openai.com"],
      "endpoints": ["/v1/chat/completions"],
      "methods": ["POST"],
      "rate_limit": "100/hour"
    }
  },
  "network_policy": {
    "allowed_domains": ["api.openai.com"],
    "websockets": "denied"
  },
  "api_schemas": {
    "openai": {
      "chat_completions": {
        "type": "object",
        "required": ["prompt"],
        "properties": {
          "prompt": {"type": "string", "maxLength": 4000}
        }
      }
    }
  }
}
```

## MCP Server Implementation
```python
import sys
import json
from typing import Any, Dict

async def main():
    line = sys.stdin.readline()
    request = json.loads(line)
    
    # Handle request
    result = await process_request(request)
    
    # Send response
    response = {"result": result}
    sys.stdout.write(json.dumps(response) + '\n')

async def process_request(request: Dict[str, Any]) -> Dict[str, Any]:
    # Plugin logic here
    return {"status": "success"}
```

## Security Requirements
- **Zero Trust**: Plugins are not trusted by default
- **Permission Declaration**: All required permissions must be declared in manifest
- **API Validation**: All API calls must be validated against schemas
- **Rate Limiting**: Respect rate limits to prevent abuse
- **Error Handling**: Graceful error handling without exposing sensitive data

## Performance Guidelines
- **Pyodide Optimization**: Optimize for WebAssembly execution
- **Memory Management**: Clean up resources and avoid memory leaks
- **Async Operations**: Use async/await for all I/O operations
- **Caching**: Implement appropriate caching strategies
- **Bundle Size**: Keep plugin size reasonable for browser loading

## Error Handling
- **Graceful Degradation**: Continue working with reduced functionality
- **User Feedback**: Provide clear error messages to users
- **Logging**: Log errors for debugging without exposing sensitive data
- **Fallbacks**: Implement fallback mechanisms for critical features
- **Recovery**: Automatic retry mechanisms where appropriate

## Documentation Standards
- **API Documentation**: Document all public APIs and parameters
- **Usage Examples**: Provide clear usage examples
- **Error Codes**: Document all possible error codes and meanings
- **Performance Notes**: Document performance characteristics
- **Security Notes**: Document security considerations

## Testing Requirements
- **Unit Tests**: Test individual functions and components
- **Integration Tests**: Test plugin integration with host system
- **Security Tests**: Validate permission enforcement
- **Performance Tests**: Monitor memory usage and execution time
- **Error Tests**: Test error handling and recovery

## Best Practices
- **Single Responsibility**: Each plugin should have a single, clear purpose
- **Modular Design**: Break complex functionality into modules
- **Configuration**: Use configuration files for customizable behavior
- **Versioning**: Follow semantic versioning for plugin updates
- **Backward Compatibility**: Maintain compatibility with previous versions
description:
globs:
alwaysApply: false
---

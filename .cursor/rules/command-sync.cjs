#!/usr/bin/env node

/**
 * Command Synchronization Script
 * Syncs commands between USER_COMMANDS.md, ai-memory.mdc, and Cursor AI memory-bank
 * Usage: node .cursor/rules/command-sync.cjs [sync|export|import|update-cursor]
 */

const fs = require('fs');
const path = require('path');

// File paths
const USER_COMMANDS_PATH = path.join(process.cwd(), 'USER_COMMANDS.md');
const AI_MEMORY_PATH = path.join(process.cwd(), '.cursor', 'rules', 'cursor-export', 'ai-memory.mdc');
const CURSOR_MEMORY_PATH = path.join(process.cwd(), '.cursor', 'rules', 'ai-memory.mdc');

// Command structure
const commandCategories = {
  'Context and Memory': {
    'save context': {
      russian: ['–°–æ—Ö—Ä–∞–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏'],
      description: 'Save achievements, decisions and plans to memory-bank',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Ä–µ—à–µ–Ω–∏—è –∏ –ø–ª–∞–Ω—ã –≤ memory-bank'
    },
    'update progress': {
      russian: ['–û–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å', '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞'],
      description: 'Update activeContext.md and progress.md with current status',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–∏—Ç —Ñ–∞–π–ª—ã activeContext.md –∏ progress.md —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º'
    },
    'restore context': {
      russian: ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç'],
      description: 'Study all memory-bank files and restore full project understanding',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–∑—É—á–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã memory-bank –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø–æ–ª–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'
    },
    'quick restore': {
      russian: ['–ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'],
      description: 'Get brief summary of key principles and current status',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞'
    }
  },
  'Analysis and Study': {
    'analyze architecture': {
      russian: ['–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É', '–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã'],
      description: 'Study systemPatterns.md and techContext.md for architecture understanding',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–∑—É—á–∏—Ç systemPatterns.md –∏ techContext.md –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã'
    },
    'study plugins': {
      russian: ['–ò–∑—É—á–∏ –ø–ª–∞–≥–∏–Ω—ã'],
      description: 'Analyze plugins and their structure',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∞–≥–∏–Ω—ã –∏ –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É'
    },
    'check build': {
      russian: ['–ü—Ä–æ–≤–µ—Ä—å —Å–±–æ—Ä–∫—É', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±–æ—Ä–∫—É'],
      description: 'Check that project builds and works correctly',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    },
    'update documentation': {
      russian: ['–û–±–Ω–æ–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é', '–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é'],
      description: 'Check and update README.md and PLUGIN_DEVELOPMENT.md',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç README.md –∏ PLUGIN_DEVELOPMENT.md'
    }
  },
  'Development': {
    'create plugin [name]': {
      russian: ['–°–æ–∑–¥–∞–π –ø–ª–∞–≥–∏–Ω [–Ω–∞–∑–≤–∞–Ω–∏–µ]'],
      description: 'Create new plugin with specified name',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º'
    },
    'check code': {
      russian: ['–ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–Ω—Ç–∏–Ω–≥'],
      description: 'Run linting and type checking',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –ª–∏–Ω—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤'
    },
    'run tests': {
      russian: ['–ó–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç—ã', '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã'],
      description: 'Run all project tests',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—Å—Ç–∏—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞'
    },
    'check dependencies': {
      russian: ['–ü—Ä–æ–≤–µ—Ä—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏'],
      description: 'Check dependencies relevance and compatibility',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π'
    }
  },
  'Project Management': {
    'bump version patch/minor/major': {
      russian: ['–£–≤–µ–ª–∏—á—å –≤–µ—Ä—Å–∏—é [patch|minor|major]', '–í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      description: 'Increase project version according to parameter',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–≤–µ–ª–∏—á–∏—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–£–≤–µ–ª–∏—á—å –≤–µ—Ä—Å–∏—é minor")'
    },
    'clean project': {
      russian: ['–û—á–∏—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç', '–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞'],
      description: 'Clean node_modules, dist and cache',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –æ—á–∏—Å—Ç–∫—É node_modules, dist –∏ –∫—ç—à–∞'
    },
    'analyze performance': {
      russian: ['–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'],
      description: 'Analyze project performance and suggest optimizations',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'
    },
    'check security': {
      russian: ['–ü—Ä–æ–≤–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
      description: 'Analyze code and configuration security',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    }
  },
  'Releases and Deployment': {
    'create release': {
      russian: ['–°–æ–∑–¥–∞–π —Ä–µ–ª–∏–∑', '–°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑'],
      description: 'Prepare project for release (bump version, create ZIP)',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø—Ä–æ–µ–∫—Ç –∫ —Ä–µ–ª–∏–∑—É (—É–≤–µ–ª–∏—á–∏—Ç –≤–µ—Ä—Å–∏—é, —Å–æ–∑–¥–∞—Å—Ç ZIP)'
    },
    'build production': {
      russian: ['–°–æ–±–µ—Ä–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞', '–°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞'],
      description: 'Perform full production build',
      userDescription: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–æ–ª–Ω—É—é —Å–±–æ—Ä–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞'
    }
  }
};

function generateUserCommandsMD() {
  let content = `# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é –∏–∑ —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Ç —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.

`;

  for (const [category, commands] of Object.entries(commandCategories)) {
    const categoryEmoji = getCategoryEmoji(category);
    content += `## ${categoryEmoji} ${category}\n\n`;

    for (const [command, details] of Object.entries(commands)) {
      const russianCommands = details.russian.map(cmd => `\`${cmd}\``).join(' / ');
      content += `### ${details.userDescription}\n`;
      content += `${russianCommands}\n`;
      content += `*${details.userDescription}*\n\n`;
    }
  }

  content += `---

## üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

1. **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ** –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É
2. **–í—Å—Ç–∞–≤—å—Ç–µ** –≤ —á–∞—Ç —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
3. **–î–æ–∂–¥–∏—Ç–µ—Å—å** –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã

## üîÑ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

–í—ã –º–æ–∂–µ—Ç–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:
\`\`\`
–°–æ—Ö—Ä–∞–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
\`\`\`

\`\`\`
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
\`\`\`

## üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

- AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑—É—á–∏—Ç —Ñ–∞–π–ª—ã memory-bank –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–∞—Ö memory-bank
- –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ª—é–±–æ–π LLM –º–æ–¥–µ–ª—å—é, –∫–æ—Ç–æ—Ä–∞—è —Å–ª–µ–¥—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –Ω–æ–≤–æ–º —á–∞—Ç–µ

1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞:
   \`\`\`
   –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
   \`\`\`
2. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   - –ü—Ä–æ—á–∏—Ç–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã memory-bank (README.md, activeContext.md, systemPatterns.md, progress.md, productContext.md, techContext.md, session-log.md)
   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞, best practices, –∫–ª–∞–¥–±–∏—â–µ –æ—à–∏–±–æ–∫, –∫–∞—Ä—Ç—É –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   - –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ memory-bank
   - –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ ‚Äî —É—Ç–æ—á–Ω–∏—Ç —É —Ç–µ–±—è –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–æ–≤–æ–π —Ñ–∏—á–µ –∏–ª–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
3. –ö–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—Ä—É—á–Ω—É—é:
   - –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å—Ç–∏–ª—é —Ä–∞–±–æ—Ç—ã, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—É, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ memory-bank
   - –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   - –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –Ω–µ –∂–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

**–°–æ–≤–µ—Ç:** –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–∞–±–æ—Ç—ã ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–π —ç—Ç–æ –≤ memory-bank, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞ –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
`;

  return content;
}

function generateAIMemoryMD() {
  let content = `---
description: Universal user commands for AI assistant - complete command reference with triggers and actions
globs: ["**/*"]
alwaysApply: true
aiPriority: critical
aiCategory: general
---

# AI Memory Bank - Universal User Commands

## Commands for AI Assistant Recognition

`;

  for (const [category, commands] of Object.entries(commandCategories)) {
    content += `### ${category}:\n`;
    
    for (const [command, details] of Object.entries(commands)) {
      const russianCommands = details.russian.map(cmd => `\`${cmd}\``).join(' / ');
      content += `- \`${command}\` / ${russianCommands} - ${details.description}\n`;
    }
    content += '\n';
  }

  content += `## General Principles:
- Commands can be combined (e.g.: "save context and update progress")
- All actions should consider current project context
- Results should be saved in appropriate memory-bank files
- If command is unclear ‚Äî clarify details with user
- When restoring context ‚Äî read all key memory-bank files and use only current best practices
`;

  return content;
}

function generateCursorMemoryBank() {
  let content = `# AI Memory Bank - User Commands

## Commands for AI Assistant Recognition

`;

  for (const [category, commands] of Object.entries(commandCategories)) {
    content += `### ${category}:\n`;
    
    for (const [command, details] of Object.entries(commands)) {
      const russianCommands = details.russian.map(cmd => `\`${cmd}\``).join(' / ');
      content += `- \`${command}\` / ${russianCommands} - ${details.description}\n`;
    }
    content += '\n';
  }

  content += `## General Principles:
- Commands can be combined (e.g.: "save context and update progress")
- All actions should consider current project context
- Results should be saved in appropriate memory-bank files
- If command is unclear ‚Äî clarify details with user
- When restoring context ‚Äî read all key memory-bank files and use only current best practices
`;

  return content;
}

function getCategoryEmoji(category) {
  const emojiMap = {
    'Context and Memory': 'üìù',
    'Analysis and Study': 'üèóÔ∏è',
    'Development': 'üîß',
    'Project Management': 'üìä',
    'Releases and Deployment': 'üöÄ'
  };
  return emojiMap[category] || 'üìã';
}

function syncCommands() {
  console.log('üîÑ Syncing commands between all sources...\n');

  // Generate USER_COMMANDS.md
  const userCommandsContent = generateUserCommandsMD();
  fs.writeFileSync(USER_COMMANDS_PATH, userCommandsContent, 'utf8');
  console.log('‚úÖ Updated USER_COMMANDS.md');

  // Generate ai-memory.mdc
  const aiMemoryContent = generateAIMemoryMD();
  fs.writeFileSync(AI_MEMORY_PATH, aiMemoryContent, 'utf8');
  console.log('‚úÖ Updated .cursor/rules/cursor-export/ai-memory.mdc');

  // Generate Cursor memory-bank
  const cursorMemoryContent = generateCursorMemoryBank();
  fs.writeFileSync(CURSOR_MEMORY_PATH, cursorMemoryContent, 'utf8');
  console.log('‚úÖ Updated .cursor/rules/ai-memory.mdc');

  console.log('\nüéâ All command files synchronized successfully!');
}

function exportForCursor() {
  console.log('üì§ Exporting commands for Cursor AI memory-bank...\n');
  
  let cursorFormat = `# AI Memory Bank - User Commands

## Commands for AI Assistant Recognition

`;

  for (const [category, commands] of Object.entries(commandCategories)) {
    const emoji = getCategoryEmoji(category);
    cursorFormat += `### ${emoji} ${category}:\n`;
    
    for (const [command, details] of Object.entries(commands)) {
      const russianCommands = details.russian.map(cmd => `\`${cmd}\``).join(' / ');
      cursorFormat += `- \`${command}\` / ${russianCommands} - ${details.description}\n`;
    }
    cursorFormat += '\n';
  }

  cursorFormat += `## General Principles:
- Commands can be combined (e.g.: "save context and update progress")
- All actions should consider current project context
- Results should be saved in appropriate memory-bank files
- If command is unclear ‚Äî clarify details with user
- When restoring context ‚Äî read all key memory-bank files and use only current best practices

## Usage Instructions:
1. Copy this content
2. Go to Cursor Settings ‚Üí AI ‚Üí Rules & Memories
3. Paste into User Rules or Project Rules
4. Save and restart Cursor
`;

  const exportPath = path.join(process.cwd(), 'CURSOR_AI_MEMORY_BANK.md');
  fs.writeFileSync(exportPath, cursorFormat, 'utf8');
  console.log(`‚úÖ Exported to ${exportPath}`);
  console.log('\nüìã Instructions:');
  console.log('1. Copy the content from CURSOR_AI_MEMORY_BANK.md');
  console.log('2. Go to Cursor Settings ‚Üí AI ‚Üí Rules & Memories');
  console.log('3. Paste into User Rules or Project Rules');
  console.log('4. Save and restart Cursor');
}

function main() {
  const command = process.argv[2] || 'sync';

  switch (command) {
    case 'sync':
      syncCommands();
      break;
    case 'export':
      exportForCursor();
      break;
    case 'help':
      console.log(`
Command Synchronization Script

Usage: node .cursor/rules/command-sync.cjs [command]

Commands:
  sync     - Sync all command files (default)
  export   - Export commands for Cursor AI memory-bank
  help     - Show this help

Examples:
  node .cursor/rules/command-sync.cjs sync
  node .cursor/rules/command-sync.cjs export
      `);
      break;
    default:
      console.log(`‚ùå Unknown command: ${command}`);
      console.log('Use "help" to see available commands');
      process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { commandCategories, generateUserCommandsMD, generateAIMemoryMD, generateCursorMemoryBank }; 
# Стандарты создания правил в .cursor/rules

## Приоритет .mdc файлов над .md

### Обязательно использовать .mdc для:
- **Правил и стандартов** - все правила должны быть в .mdc
- **AI инструкций** - команды, принципы, ограничения
- **Архитектурных решений** - структура, паттерны, best practices
- **Автоматизации** - скрипты, workflow, процессы

### Допустимо использовать .md для:
- **Чистой документации** - README, guides, tutorials
- **Временных заметок** - черновики, эксперименты
- **Внешних ссылок** - ссылки на внешние ресурсы

## Структура .mdc файла

### Обязательные метаданные:
```yaml
---
description: Краткое описание назначения файла
globs: ["**/*"]  # Паттерны файлов для применения
alwaysApply: true  # Автоматическое применение
---
```

### Дополнительные метаданные:
```yaml
---
description: Описание
globs: ["pages/**/*", "packages/**/*"]
alwaysApply: false  # Применяется по запросу
related:
  - other-rule.mdc
  - another-rule.mdc
---
```

## Преимущества .mdc файлов

### 1. Автоматическое применение
- Cursor читает метаданные при создании чата
- Правила применяются без явного обращения
- `alwaysApply: true` обеспечивает постоянное действие

### 2. Лучшая интеграция с AI
- AI понимает контекст применения через `globs`
- Описание помогает AI выбрать подходящие правила
- Структурированные метаданные улучшают понимание

### 3. Приоритизация и организация
- `alwaysApply` определяет важность правила
- `related` связывает связанные правила
- `globs` ограничивает область применения

### 4. AI memory-bank интеграция
- Правила автоматически попадают в AI memory-bank
- Доступны через Настройки / Rules & Memories
- Сохраняются между сессиями

## Миграция .md → .mdc

### Когда мигрировать:
- Файл содержит правила или инструкции
- Файл должен применяться автоматически
- Файл важен для AI понимания проекта

### Процесс миграции:
1. Переименовать `.md` → `.mdc`
2. Добавить YAML frontmatter с метаданными
3. Убедиться в корректности `globs` и `alwaysApply`
4. Проверить интеграцию с AI memory-bank

## Примеры правильного использования

### ✅ Правильно - .mdc с метаданными:
```yaml
---
description: Правила TypeScript - конфигурация, barrel exports, troubleshooting
globs: ["**/*.ts", "**/*.tsx", "**/*.json"]
alwaysApply: true
---
```

### ❌ Неправильно - .md без метаданных:
```markdown
# TypeScript Rules
- Use strict mode
- Prefer barrel exports
```

## Исключения

### Допустимые .md файлы:
- `README.md` - главная документация проекта
- `CHANGELOG.md` - история изменений
- `LICENSE.md` - лицензия
- Временные файлы с префиксом `temp-` или `draft-`

## Проверка соответствия

### Автоматическая проверка:
```bash
# Найти все .md файлы в .cursor/rules
find .cursor/rules -name "*.md" -not -name "README.md"

# Проверить структуру .mdc файлов
node .cursor/rules/check-rules-structure.cjs
```

### Ручная проверка:
1. Все ли правила в .mdc формате?
2. Есть ли метаданные во всех .mdc файлах?
3. Корректны ли `globs` и `alwaysApply`?
4. Нужно ли мигрировать какие-то .md файлы?

## Рекомендации

1. **Всегда начинать с .mdc** для новых правил
2. **Мигрировать важные .md** файлы в .mdc
3. **Проверять метаданные** при создании правил
4. **Использовать `alwaysApply: true`** для критических правил
5. **Документировать исключения** в README.mdc
description:
globs:
alwaysApply: false
---

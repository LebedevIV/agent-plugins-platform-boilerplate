# ðŸŽ¨ UI/UX Standards

## React Component Standards
- **TypeScript**: Use TypeScript for all new components
- **Functional Components**: Prefer functional components with hooks
- **Props Interface**: Define clear interfaces for component props
- **Default Props**: Provide sensible default values
- **Error Boundaries**: Wrap components in error boundaries

## Accessibility (A11y)
- **ARIA Labels**: Provide proper ARIA labels for interactive elements
- **Keyboard Navigation**: Ensure all functionality is keyboard accessible
- **Focus Management**: Proper focus handling and visible focus indicators
- **Screen Reader Support**: Semantic HTML and descriptive text
- **Color Contrast**: Meet WCAG contrast requirements

## Styling Standards
- **Tailwind CSS**: Use Tailwind for consistent styling
- **Component Classes**: Organize CSS classes logically
- **Responsive Design**: Work on different screen sizes
- **Theme Support**: Support light/dark mode
- **CSS Variables**: Use CSS variables for theme values

## Loading States
- **Skeleton Loading**: Show skeleton UI while loading
- **Progress Indicators**: Use spinners or progress bars
- **Loading Messages**: Provide informative loading messages
- **Timeout Handling**: Handle loading timeouts gracefully
- **Error States**: Show appropriate error states

## Error Handling
- **User-Friendly Messages**: Clear, actionable error messages
- **Error Boundaries**: Catch and handle component errors
- **Fallback UI**: Provide fallback UI for failed components
- **Retry Mechanisms**: Allow users to retry failed operations
- **Error Logging**: Log errors for debugging

## Form Standards
- **Validation**: Client-side and server-side validation
- **Error Display**: Show validation errors clearly
- **Success Feedback**: Provide clear success feedback
- **Auto-save**: Auto-save forms where appropriate
- **Keyboard Shortcuts**: Support common keyboard shortcuts

## Navigation
- **Breadcrumbs**: Provide clear navigation context
- **Active States**: Clearly indicate current page/section
- **Back Navigation**: Support browser back button
- **Deep Linking**: Support direct links to specific content
- **Loading States**: Show loading during navigation

## Performance
- **Lazy Loading**: Lazy load components and routes
- **Memoization**: Use React.memo and useMemo appropriately
- **Bundle Splitting**: Split code into smaller bundles
- **Image Optimization**: Optimize images for web
- **Caching**: Implement appropriate caching strategies

## Mobile Responsiveness
- **Touch Targets**: Adequate size for touch interaction
- **Viewport**: Proper viewport meta tags
- **Flexible Layouts**: Use flexbox and grid for responsive layouts
- **Touch Gestures**: Support common touch gestures
- **Performance**: Optimize for mobile performance

## Animation and Transitions
- **Smooth Transitions**: Use CSS transitions for state changes
- **Loading Animations**: Subtle loading animations
- **Micro-interactions**: Enhance user experience with micro-interactions
- **Performance**: Ensure animations don't impact performance
- **Reduced Motion**: Respect user's motion preferences

## Testing
- **Unit Tests**: Test component logic and behavior
- **Integration Tests**: Test component interactions
- **Visual Tests**: Test visual appearance and layout
- **Accessibility Tests**: Test accessibility compliance
- **Performance Tests**: Test component performance
description:
globs:
alwaysApply: false
---


<!-- AI: This is an AI-specific rule or instruction -->
<!-- AI: Priority: critical -->
<!-- AI: Category: general -->

---
description: User commands for AI assistant - complete command reference with triggers and actions
globs: ["**/*"]
alwaysApply: true
aiPriority: critical
aiCategory: general
---

# AI Memory Bank - User Commands

## Commands for AI Assistant Recognition

### Context and Memory:
- `save context` / `save session context` - Save achievements, decisions and plans to memory-bank
- `update progress` / `update project progress` - Update activeContext.md and progress.md files with current status
- `restore context` / `restore full context` - Study all memory-bank files and restore complete project understanding
- `quick restore` - Get brief summary of key principles and current status

### Analysis and Research:
- `analyze architecture` / `architecture analysis` - Study systemPatterns.md and techContext.md for architecture understanding
- `study plugins` - Analyze plugins and their structure
- `check build` / `verify build` - Verify that project builds and works correctly
- `update documentation` / `refresh documentation` - Check and update README.md and PLUGIN_DEVELOPMENT.md

### Development:
- `create plugin [name]` - Create new plugin with specified name
- `check code` / `run linting` - Execute linting and type checking
- `run tests` / `execute tests` - Run all project tests
- `check dependencies` / `verify dependencies` - Check dependencies relevance and compatibility

### Project Management:
- `bump version patch/minor/major` / `versioning` - Increase project version according to parameter
- `clean project` / `project cleanup` - Execute cleanup of node_modules, dist and cache
- `analyze performance` / `performance analysis` - Analyze project performance and suggest optimizations
- `check security` / `security analysis` - Analyze code and configuration security

### .cursor Automation:
- `audit cursor` / `cursor audit` - Run comprehensive audit of .cursor directory
- `fix cursor` / `cursor fix` - Apply automatic fixes to found issues
- `optimize cursor` / `cursor optimize` - Optimize rules for AI and Cursor
- `full cursor` / `cursor full` - Run complete workflow (audit + fixes + optimization)
- `cursor status` / `status cursor` - Show current status and recommendations
- `create rule [name]` - Create new rule in .cursor/rules with proper metadata

### Experience Export/Import:
- `export cursor` / `cursor export` - Export all .cursor rules for transfer to another project
- `export cursor [project]` - Export with target project specification
- `import cursor` - Import rules from cursor-export to current project
- `implement best practices` - Implement all automations and standards from .cursor to project
- `audit project` - Conduct audit for best practices compliance

### Releases and Deployment:
- `create release` / `prepare release` - Prepare project for release (bump version, create ZIP)
- `build for production` / `production build` - Execute complete production build
- `pull request` / `create PR` / `make PR` / `submit PR` - Make commit, push and create pull request with detailed change description

### Documentation and Learning:
- `add to user commands` / `add to USER_COMMANDS` - Add command to USER_COMMANDS.md
- `audit errors` - Conduct error audit, form and document list
- `document` / `create documentation` / `save experience` / `record experience` - Analyze recently solved problems and place according to file assignment map: universal rules → .cursor/rules/, project-specific → memory-bank/ (by MEMORY_BANK_STRUCTURE.md structure)
- `create rule` / `add rule` - Create new rule in .cursor/rules/ in .mdc format with metadata

## General Principles:
- Commands can be combined (e.g.: "save context and update progress")
- All actions should consider current project context
- Save results in appropriate memory-bank files
- If command is unclear — clarify details with user
- When restoring context — read all key memory-bank files and use only current best practices 